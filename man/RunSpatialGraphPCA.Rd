% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DimensionalityReduction.R
\name{RunSpatialGraphPCA}
\alias{RunSpatialGraphPCA}
\title{Perform Dimensionality Reduction using Graph-Regularised PCA on Spatial Data}
\usage{
RunSpatialGraphPCA(
  data,
  n_components = 50,
  assay = "Spatial",
  slot = "scale.data",
  image = "slice1",
  platform = "Visium",
  lambda = 0.5,
  n_neighbors = NULL,
  include_self = FALSE,
  alg = "kd_tree",
  fast = TRUE,
  graph_name = "SpatialKNN",
  reduction_name = "SpatialPCA",
  verbose = TRUE
)
}
\arguments{
\item{data}{A SpaMTP Seurat object containing spatial data (feature data and spatial coordinates).}

\item{n_components}{Integer specifying the number of principal components to compute (default = 50).}

\item{assay}{Character string defining the name of the assay to use data from (default = "Spatial").}

\item{slot}{Character string defining the name of the slot to extract scaled data from (default = "scale.data").}

\item{image}{Character string matching the name of the image to use for extracting spatial coordinates (default = "slice1").}

\item{platform}{Character string matching either \code{"Visium"} or \code{"ST"} to determine how the k-NN graph is constructed. If "Visium" k-nns will handle the hexagon spot arrangement, including setting \code{n_neighbors} = 6, else "ST" assignment will set \code{n_neighbors} = 4 unless a value is specifically provided (default = "Visium").}

\item{lambda}{Numeric value defining the regularisation parameter that controls the influence of the graph Laplacian (default = 0.5).}

\item{n_neighbors}{Integer value specifying the number of spatial neighbours to use. If \code{NULL}, will default of 6 for "Visium" data and 4 for "ST" platforms (default = NULL).}

\item{include_self}{Boolean logical value indicating whether to include self-connections in the graph (default = FALSE).}

\item{alg}{Character string specifying the algorithm to use for nearest neighbour search (passed to \code{FNN::get.knn()}) (default ="kd_tree").}

\item{fast}{Boolean logical value stating whether to use fast approximate eigendecomposition via \code{RSpectra::eigs_sym()}. For large datasets this is recommended (default =TRUE).}

\item{graph_name}{Character string of the name to use for storing the computed spatial graph in \verb{@graphs}(default ="SpatialKNN").}

\item{reduction_name}{Character string stating the name of the dimensionality reduction stored in \verb{@reductions}(default ="SpatialPCA").}

\item{verbose}{Boolean indicating whether to show the message. If TRUE the message will be show, else the message will be suppressed (default = TRUE).}
}
\value{
A SpaMTP Seurat object with a new graph stored in \verb{@graphs} and spatially-aware PCA reduction values stored in \verb{@reductions}.
}
\description{
Computes a graph-regularised PCA using spatial coordinates and scaled expression data. A k-nearest neighbour (k-NN) graph is computed using spatial locations and used to regularise the PCA decomposition via a graph Laplacian. The result are stored in the \verb{@reductions} section of the returned SpaMTP Seurat object.
}
\details{
Note: This method has been adapted from \href{https://doi.org/10.1186/s13059-024-03429-x}{GraphPCA} python package.
}
\examples{
# spamtp_obj <- RunSpatialGraphPCA(spamtp_obj, platform = "Visium")
}
